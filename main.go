package main

/////////////////////////////////////////////////////////////////
//Code generated by chidley https://github.com/gnewton/chidley //
/////////////////////////////////////////////////////////////////

import (
	"encoding/xml"
	"flag"
	"fmt"
	"github.com/jinzhu/gorm"
	"log"
	"strconv"
	"time"
)

var filename = "/home/gnewton/newtong/work/pubmedDownloadXmlById/aa/pubmed_xml_26419650"

func init() {
	flag.StringVar(&filename, "f", filename, "XML file or URL to read in")
}

var out int = -1

var counters map[string]*int

const PUBMED_ARTICLE = "PubmedArticle"

func main() {

	db, err := dbInit()
	if err != nil {
		log.Fatal(err)
		return
	}

	flag.Parse()

	reader, _, err := genericReader(filename)
	if err != nil {
		log.Fatal(err)
		return
	}
	count := 0
	artCount := 0
	decoder := xml.NewDecoder(reader)
	counters = make(map[string]*int)
	t0 := time.Now()

	tx := db.Begin()

	for {
		if count%1000 == 0 {
			fmt.Println("------------")
			fmt.Println(count)
			fmt.Println("------------")
		}

		token, _ := decoder.Token()
		if token == nil {
			break
		}
		switch se := token.(type) {
		case xml.StartElement:
			if se.Name.Local == PUBMED_ARTICLE || se.Name.Local == "PubmedBookArticle" {
				count = count + 1
			}
			if se.Name.Local == PUBMED_ARTICLE && se.Name.Space == "" {
				artCount = artCount + 1
				if artCount%15000 == 0 {
					if artCount != 0 {
						go func(tx *gorm.DB) {
							tx.Commit()
						}(tx)
						tx = db.Begin()
					}
					fmt.Println(count)
					fmt.Println(artCount)
					t1 := time.Now()
					fmt.Printf("The call took %v to run.\n", t1.Sub(t0))
					fmt.Println("------------")
					t0 = time.Now()

				}

				var pubmedArticle ChiPubmedArticle
				decoder.DecodeElement(&pubmedArticle, &se)
				dbArticle := pubmedArticleToDbArticle(&pubmedArticle)
				if err := tx.Create(dbArticle).Error; err != nil {
					tx.Rollback()
					log.Fatal(err)
				}
			}
		}
	}
}

func pubmedArticleToDbArticle(p *ChiPubmedArticle) *Article {
	pArticle := p.ChiMedlineCitation.ChiArticle
	dbArticle := new(Article)
	dbArticle.Id, _ = strconv.ParseInt(p.ChiMedlineCitation.ChiPMID.Text, 10, 64)
	dbArticle.Abstract = ""
	if pArticle.ChiAbstract != nil && pArticle.ChiAbstract.ChiAbstractText != nil {
		for i, _ := range pArticle.ChiAbstract.ChiAbstractText {
			dbArticle.Abstract = dbArticle.Abstract + " " + pArticle.ChiAbstract.ChiAbstractText[i].Text
		}
	}

	dbArticle.Title = pArticle.ChiArticleTitle.Text

	if pArticle.ChiAuthorList != nil {
		dbArticle.Authors = make([]Author, len(pArticle.ChiAuthorList.ChiAuthor))
		for i, author := range pArticle.ChiAuthorList.ChiAuthor {
			dbAuthor := new(Author)
			if author.ChiIdentifier != nil {
				//dbAuthor.Id = author.ChiIdentifier.Text
			}
			if author.ChiLastName != nil {
				dbAuthor.LastName = author.ChiLastName.Text
			}
			if author.ChiForeName != nil {
				dbAuthor.FirstName = author.ChiForeName.Text
			}
			dbArticle.Authors[i] = *dbAuthor
		}
	}
	return dbArticle
}
