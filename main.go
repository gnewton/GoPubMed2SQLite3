package main

/////////////////////////////////////////////////////////////////
//Code generated by chidley https://github.com/gnewton/chidley //
/////////////////////////////////////////////////////////////////

import (
	"encoding/xml"
	//"flag"
	"fmt"
	//"github.com/davecheney/profile"
	"github.com/jinzhu/gorm"
	"log"
	//	"net/http"
	"os"
	"strconv"
	"time"
)

var filename = "/home/gnewton/newtong/work/pubmedDownloadXmlById/aa/pubmed_xml_26419650"

func init() {

}

var out int = -1

var counters map[string]*int

const PUBMED_ARTICLE = "PubmedArticle"

func main() {

	//defer profile.Start(profile.CPUProfile).Stop()

	db, err := dbInit()
	if err != nil {
		log.Fatal(err)
		return
	}

	pubmedArticleChannel := make(chan *ChiPubmedArticle, 25000)

	done := make(chan bool)

	go articleAdder(pubmedArticleChannel, done, db, 10000)

	for _, filename := range os.Args {

		log.Println("Opening: " + filename)
		reader, _, err := genericReader(filename)
		if err != nil {
			log.Fatal(err)
			return
		}
		count := 0

		decoder := xml.NewDecoder(reader)
		counters = make(map[string]*int)

		for {
			db.Raw("create unique index IF NOT EXISTS a2 on Article_Author(article_id,author_id);")
			if count%1000 == 0 {
				fmt.Println("------------")
				fmt.Println(count)
				fmt.Println("------------")
			}

			token, _ := decoder.Token()
			if token == nil {
				break
			}
			switch se := token.(type) {
			case xml.StartElement:
				//if se.Name.Local == PUBMED_ARTICLE || se.Name.Local == "PubmedBookArticle" {
				//
				//}
				if se.Name.Local == PUBMED_ARTICLE && se.Name.Space == "" {
					count = count + 1
					var pubmedArticle ChiPubmedArticle
					decoder.DecodeElement(&pubmedArticle, &se)
					pubmedArticleChannel <- &pubmedArticle
				}
			}
		}
	}
	close(pubmedArticleChannel)
	_ = <-done
}

func pubmedArticleToDbArticle(p *ChiPubmedArticle) *Article {
	pArticle := p.ChiMedlineCitation.ChiArticle
	dbArticle := new(Article)
	dbArticle.Id, _ = strconv.ParseInt(p.ChiMedlineCitation.ChiPMID.Text, 10, 64)
	dbArticle.Abstract = ""
	if pArticle.ChiAbstract != nil && pArticle.ChiAbstract.ChiAbstractText != nil {
		for i, _ := range pArticle.ChiAbstract.ChiAbstractText {
			dbArticle.Abstract = dbArticle.Abstract + " " + pArticle.ChiAbstract.ChiAbstractText[i].Text
		}
	}

	dbArticle.Title = pArticle.ChiArticleTitle.Text

	if pArticle.ChiAuthorList != nil {
		dbArticle.Authors = make([]Author, len(pArticle.ChiAuthorList.ChiAuthor))
		for i, author := range pArticle.ChiAuthorList.ChiAuthor {
			dbAuthor := new(Author)
			if author.ChiIdentifier != nil {
				//dbAuthor.Id = author.ChiIdentifier.Text
			}
			if author.ChiLastName != nil {
				dbAuthor.LastName = author.ChiLastName.Text
			}
			if author.ChiForeName != nil {
				dbAuthor.FirstName = author.ChiForeName.Text
			}
			dbArticle.Authors[i] = *dbAuthor
		}
	}

	return dbArticle
}

func articleAdder(pubmedArticleChannel chan *ChiPubmedArticle, done chan bool, db *gorm.DB, commitSize int) {
	commitChannel := make(chan *gorm.DB, 10)
	doneCommitting := make(chan bool)

	go committer(commitChannel, doneCommitting, db)

	tx := db.Begin()
	t0 := time.Now()
	counter := 0
	for pubmedArticle := range pubmedArticleChannel {
		counter = counter + 1
		if counter%commitSize == 0 {
			commitChannel <- tx
			t1 := time.Now()
			fmt.Printf("++++++++++++ The call took %v to run.\n", t1.Sub(t0))
			t0 = time.Now()
			tx = db.Begin()
		}
		dbArticle := pubmedArticleToDbArticle(pubmedArticle)
		if err := tx.Create(dbArticle).Error; err != nil {
			//tx.Rollback()
			log.Println("\\\\\\\\\\\\\\\\")
			//log.Fatal(err)
		}
	}
	commitChannel <- tx
	close(commitChannel)
	db.Close()
	_ = <-doneCommitting
	done <- true
}

func committer(transactionChannel chan *gorm.DB, doneCommitting chan bool, db *gorm.DB) {
	for tx := range transactionChannel {
		t0 := time.Now()
		tx.Commit()
		t1 := time.Now()
		fmt.Printf("The call took %v to run.\n", t1.Sub(t0))
	}
	doneCommitting <- true
}
