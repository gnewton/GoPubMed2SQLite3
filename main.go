package main

/////////////////////////////////////////////////////////////////
//Code generated by chidley https://github.com/gnewton/chidley //
/////////////////////////////////////////////////////////////////

import (
	"encoding/xml"
	"flag"
	"fmt"
	//"github.com/davecheney/profile"
	"github.com/jinzhu/gorm"
	"log"
	//	"net/http"
	"os"
	"strconv"
	//"strings"
	"time"
)

var TransactionSize = 100000
var chunkSize = 10000
var CloseOpenSize int64 = 500000
var chunkChannelSize = 5
var dbFileName = "./pubmed_sqlite.db"
var sqliteLogFlag = false

const CommentsCorrections_RefType = "Cites"
const PUBMED_ARTICLE = "PubmedArticle"

var out int = -1
var JournalIdCounter int64 = 0
var counters map[string]*int
var closeOpenCount int64 = 0

func init() {

	flag.BoolVar(&sqliteLogFlag, "L", sqliteLogFlag, "Turn on sqlite logging")
	flag.StringVar(&dbFileName, "f", dbFileName, "SQLite output filename")

	flag.IntVar(&TransactionSize, "t", TransactionSize, "Size of transactions")
	flag.IntVar(&chunkSize, "C", chunkSize, "Size of chunks")
	flag.Int64Var(&CloseOpenSize, "z", CloseOpenSize, "Num of records before sqlite connection is closed then reopened")
	flag.Parse()
	if len(flag.Args()) == 0 {
		flag.Usage()
		os.Exit(1)
	}
}

func main() {

	//defer profile.Start(profile.CPUProfile).Stop()

	db, err := dbInit()
	if err != nil {
		log.Fatal(err)
		return
	}
	defer func() {
		err = db.Close()
		if err != nil {
			log.Fatal(err)
		}
	}()

	articleChannel := make(chan []*Article, chunkChannelSize)

	done := make(chan bool)

	go articleAdder(articleChannel, done, db, TransactionSize)
	count := 0
	chunkCount := 0
	arrayIndex := 0

	var articleArray []*Article

	for i, filename := range flag.Args() {
		if i == 0 {
			continue
		}
		log.Println("Opening: "+filename, " ", i, " of ", len(os.Args))
		log.Println(strconv.Itoa(i) + " of " + strconv.Itoa(len(os.Args)-1))
		reader, _, err := genericReader(filename)

		if err != nil {
			log.Fatal(err)
			return
		}
		articleArray = make([]*Article, chunkSize)

		decoder := xml.NewDecoder(reader)
		counters = make(map[string]*int)

		for {

			token, _ := decoder.Token()
			if token == nil {
				break
			}
			switch se := token.(type) {
			case xml.StartElement:
				if se.Name.Local == PUBMED_ARTICLE && se.Name.Space == "" {
					if count%10000 == 0 && count != 0 {
						log.Println("------------")
						log.Printf("count=%d\n", count)
						log.Printf("arrayIndex=%d\n", arrayIndex)
						log.Println("------------")
					}

					count = count + 1

					var pubmedArticle ChiPubmedArticle
					decoder.DecodeElement(&pubmedArticle, &se)
					article := pubmedArticleToDbArticle(&pubmedArticle)
					if article == nil {
						log.Println("-----------------nil")
						continue
					}
					//log.Printf("%d\n", article.Id)
					articleArray[arrayIndex] = article
					arrayIndex = arrayIndex + 1
					if arrayIndex >= chunkSize {
						log.Printf("Sending chunk %d", chunkCount)
						chunkCount = chunkCount + 1
						//pubmedArticleChannel <- &pubmedArticle
						//log.Printf("%v\n", articleArray)
						articleChannel <- articleArray
						log.Println("Sent")
						articleArray = make([]*Article, chunkSize)
						arrayIndex = 0
					}
				}
			}
		}
	}

	if arrayIndex > 0 && arrayIndex < chunkSize {
		articleChannel <- articleArray
	}

	close(articleChannel)
	_ = <-done

}

func pubmedArticleToDbArticle(p *ChiPubmedArticle) *Article {
	medlineCitation := p.ChiMedlineCitation
	pArticle := medlineCitation.ChiArticle
	if pArticle == nil {
		log.Println("nil-----------")
		return nil
	}

	dbArticle := new(Article)
	dbArticle.Id, _ = strconv.ParseInt(p.ChiMedlineCitation.ChiPMID.Text, 10, 64)
	dbArticle.Abstract = ""
	//if pArticle !=pArticle.ChiAbstract != nil && pArticle.ChiAbstract.ChiAbstractText != nil {
	if pArticle.ChiAbstract != nil && pArticle.ChiAbstract.ChiAbstractText != nil {
		for i, _ := range pArticle.ChiAbstract.ChiAbstractText {
			dbArticle.Abstract = dbArticle.Abstract + " " + pArticle.ChiAbstract.ChiAbstractText[i].Text
		}
	}

	dbArticle.Title = pArticle.ChiArticleTitle.Text
	if pArticle.ChiArticleDate != nil {
		dbArticle.Year, _ = strconv.Atoi(pArticle.ChiArticleDate.ChiYear.Text)
		dbArticle.Month = pArticle.ChiArticleDate.ChiMonth.Text
		dbArticle.Day, _ = strconv.Atoi(pArticle.ChiArticleDate.ChiDay.Text)
	}

	if medlineCitation.ChiCommentsCorrectionsList != nil {
		actualCitationCount := 0
		for _, commentsCorrection := range medlineCitation.ChiCommentsCorrectionsList.ChiCommentsCorrections {
			if commentsCorrection.Attr_RefType == CommentsCorrections_RefType {
				actualCitationCount = actualCitationCount + 1
			}
		}

		dbArticle.Citations = make([]Citation, actualCitationCount)
		counter := 0
		for _, commentsCorrection := range medlineCitation.ChiCommentsCorrectionsList.ChiCommentsCorrections {
			if commentsCorrection.Attr_RefType == CommentsCorrections_RefType {
				citation := new(Citation)
				citation.Pmid, _ = strconv.ParseInt(commentsCorrection.ChiPMID.Text, 10, 64)
				citation.RefSource = commentsCorrection.ChiRefSource.Text
				dbArticle.Citations[counter] = *citation
				counter = counter + 1
			}
		}

	}

	if medlineCitation.ChiChemicalList != nil {
		dbArticle.Chemicals = make([]Chemical, len(medlineCitation.ChiChemicalList.ChiChemical))
		for i, chemical := range medlineCitation.ChiChemicalList.ChiChemical {
			dbChemical := new(Chemical)
			dbChemical.Name = chemical.ChiNameOfSubstance.Text
			dbChemical.Registry = chemical.ChiRegistryNumber.Text
			dbArticle.Chemicals[i] = *dbChemical
		}

	}

	if medlineCitation.ChiMeshHeadingList != nil {
		dbArticle.MeshTerms = make([]MeshTerm, len(medlineCitation.ChiMeshHeadingList.ChiMeshHeading))
		for i, mesh := range medlineCitation.ChiMeshHeadingList.ChiMeshHeading {
			dbMesh := new(MeshTerm)
			dbMesh.Descriptor = mesh.ChiDescriptorName.Text
			//dbMesh.Qualifier = mesh.ChiQualifierName.Text
			dbArticle.MeshTerms[i] = *dbMesh
		}
	}

	if pArticle.ChiJournal != nil {
		//journal := Journal{}
		//db.First(&journal, 10)
		//db.First(&user, 10)
		//db.Where("name = ?", "hello world").First(&User{}).Error == gorm.RecordNotFound
		//fmt.Println(pArticle.ChiJournal.ChiTitle.Text)
		journal := Journal{
			Title: pArticle.ChiJournal.ChiTitle.Text,
		}
		//journal := new(Journal)
		//journal.Id = JournalIdCounter
		//journal.Title = pArticle.ChiJournal.ChiTitle.Text
		if pArticle.ChiJournal.ChiISSN != nil {
			journal.Issn = pArticle.ChiJournal.ChiISSN.Text
		}
		dbArticle.Journal = journal
		//dbArticle.journal_id.Int64 = journal.Id
		//dbArticle.journal_id.Valid = true
		//JournalIdCounter = JournalIdCounter + 1

	}

	if pArticle.ChiAuthorList != nil {
		dbArticle.Authors = make([]Author, len(pArticle.ChiAuthorList.ChiAuthor))
		for i, author := range pArticle.ChiAuthorList.ChiAuthor {
			dbAuthor := new(Author)
			if author.ChiIdentifier != nil {
				//dbAuthor.Id = author.ChiIdentifier.Text
			}
			if author.ChiLastName != nil {
				dbAuthor.LastName = author.ChiLastName.Text
			}
			if author.ChiForeName != nil {
				dbAuthor.FirstName = author.ChiForeName.Text
			}
			dbArticle.Authors[i] = *dbAuthor
		}
	}

	return dbArticle
}

func articleAdder(articleChannel chan []*Article, done chan bool, db *gorm.DB, commitSize int) {
	log.Println("Start articleAdder")
	tx := db.Begin()
	t0 := time.Now()
	var totalCount int64 = 0
	counter := 0
	chunkCount := 0
	for articleArray := range articleChannel {
		log.Println("-- Consuming chunk ", chunkCount)

		log.Printf("articleAdder counter=%d", counter)
		log.Printf("TOTAL counter=%d", totalCount)
		log.Println(commitSize)
		tmp := articleArray
		for i := 0; i < len(tmp); i++ {
			article := tmp[i]
			if article == nil {
				log.Println(i, " ******** Article is nil")
				continue
			}

			counter = counter + 1
			totalCount = totalCount + 1
			closeOpenCount = closeOpenCount + 1
			if counter == commitSize {
				tc0 := time.Now()
				tx.Commit()
				t1 := time.Now()
				fmt.Printf("++++++++++++ The commit took %v to run.\n", t1.Sub(tc0))
				fmt.Printf("++++++++++++ The call took %v to run.\n", t1.Sub(t0))
				t0 = time.Now()
				counter = 0

				if closeOpenCount >= CloseOpenSize {
					log.Println("CLOSEOPEN $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ", closeOpenCount)
					var err error
					db, err = dbCloseOpen(db)
					if err != nil {
						log.Fatal(err)
					}
					closeOpenCount = 0
				}

				tx = db.Begin()
			}
			if err := tx.Create(article).Error; err != nil {
				tx.Rollback()
				log.Println("\\\\\\\\\\\\\\\\")
				log.Println("[", err, "]")
				log.Printf("PMID=%d", article.Id)
				//if !strings.HasSuffix(err.Error(), "PRIMARY KEY must be unique") {
				//continue
				//}
				//log.Println("Returning from articleAdder")
				//log.Fatal(" Fatal\\\\\\\\\\\\\\\\")
				//return
				tx = db.Begin()
			}
		}
		log.Println("-- END chunk ", chunkCount)
	}
	tx.Commit()
	makeIndexes(db)
	db.Close()
	done <- true
}
